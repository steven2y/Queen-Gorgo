// Generated by CoffeeScript 1.4.0
(function() {
  var Display, DisplayRowView, PhotoList, PictureControl;

  Display = Backbone.Model.extend({
    initialize: function(id, options) {
      this.socket = options.socket;
      return this.bind("change", function(model) {
        console.log("change");
        console.log(model.toJSON());
        return this.socket.emit("controlShowDisplay", model.toJSON());
      });
    }
  });

  DisplayRowView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.model.on("change", this.refreshFromModel, this);
    },
    templateRow: "<tr><td>{{timestamp}}</td><td><input class='message' type='text' value='{{message}}'/></td><td>{{width}}x{{height}} (px)</td></tr>",
    render: function() {
      this.row = $(_.template(this.templateRow, this.model.toJSON()));
      this.inputMessage = this.row.find("input.message");
      this.inputMessage.on("change", _.bind(this.updateMessageModel, this));
      this.$el.append(this.row);
      return this;
    },
    updateMessageModel: function(e) {
      var value;
      value = $(e.target).val();
      return this.model.set({
        'message': value
      });
    },
    refreshFromModel: function() {
      this.inputMessage.val(this.model.get('message'));
      return console.log('refresh');
    }
  });

  PhotoList = (function() {

    function PhotoList(ul) {
      this.ul = ul;
      this.photos = [];
      _.extend(this, Backbone.Events);
    }

    PhotoList.prototype.templatePhoto = "<li class='span1'>                <a class='thumbnail' href='#'>                 <image src='{{src}}' />                </a>                </li>";

    PhotoList.prototype.update = function(list) {
      var photo, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        photo = list[_i];
        if (jQuery.inArray(photo, this.photos) === -1) {
          this.photos.push(photo);
          _results.push(this.showPhoto(photo));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PhotoList.prototype.showPhoto = function(photoPath) {
      var photo, src,
        _this = this;
      src = photoPath;
      photo = $(_.template(this.templatePhoto, {
        src: src
      }));
      $(photo).find("a.thumbnail").click(function(e) {
        return _this.trigger("imgClick", src);
      });
      return this.ul.append(photo);
    };

    return PhotoList;

  })();

  PictureControl = (function() {

    PictureControl.prototype.image = '';

    function PictureControl(div) {
      this.div = div;
      this.displayFrames = [];
      this.tnSize = {
        height: 0,
        width: 0
      };
    }

    PictureControl.prototype.templateImage = "<image src='{{src}}' />";

    PictureControl.prototype.templateDim = "<p class='dimensions'>{{height}}x{{width}}(px)</p>";

    PictureControl.prototype.loadImage = function(src) {
      var _this = this;
      this.src = src;
      this.image = new Image();
      $(this.image).load(_.bind(function() {
        var biUrl, tnHeight, tnWidth;
        if (_this.tnImage) {
          _this.tnImage.remove();
        }
        if (_this.tnDim) {
          _this.tnDim.remove();
        }
        _this.tnImage = $(_.template(_this.templateImage, {
          src: src
        }));
        _this.tnDim = $(_.template(_this.templateDim, {
          height: _this.image.height,
          width: _this.image.width
        }));
        _this.div.append(_this.tnImage);
        _this.div.append(_this.tnDim);
        _this.tnSize = {
          height: _this.tnImage.height(),
          width: _this.tnImage.width()
        };
        tnHeight = _this.getTnHeight() + 'px';
        tnWidth = _this.getTnWidth() + 'px';
        biUrl = "url('" + _this.src + "')";
        _this.div.css({
          height: tnHeight,
          width: tnWidth,
          'background-image': biUrl,
          'background-size': tnWidth + ' ' + tnHeight,
          'background-repeat': 'no-repeat'
        });
        _this.tnImage.remove();
        return _this.refreshDisplayFrames();
      }));
      return this.image.src = src;
    };

    PictureControl.prototype.templateDisplayFrame = "<div class='displayFrame'></div>";

    PictureControl.prototype.refreshDisplayFrames = function() {
      var model, _i, _len, _ref, _results;
      this.clearDisplayFrame();
      _ref = this.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        _results.push(this.addDisplayFrame(model));
      }
      return _results;
    };

    PictureControl.prototype.setModels = function(models) {
      this.models = models;
      if (this.image) {
        return this.refreshDisplayFrames();
      }
    };

    PictureControl.prototype.clearDisplayFrame = function() {
      var frames, _i, _len, _ref, _results;
      _ref = this.displayFrames;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frames = _ref[_i];
        _results.push(frames.remove());
      }
      return _results;
    };

    PictureControl.prototype.addDisplayFrame = function(model) {
      var newDisplay,
        _this = this;
      newDisplay = $(_.template(this.templateDisplayFrame, {}));
      console.log($(this.div).position());
      $(this.div).append(newDisplay);
      newDisplay.draggable({
        containment: "parent",
        drag: function(e, ui) {
          var left, top;
          top = _this.scaleUp(ui.position.top);
          left = _this.scaleUp(ui.position.left);
          return model.set({
            imageTop: 0 - top,
            imageLeft: 0 - left
          });
        }
      });
      this.setDisplaySize(model, newDisplay);
      return this.displayFrames.push(newDisplay);
    };

    PictureControl.prototype.setDisplaySize = function(model, display) {
      var height, width;
      height = this.scaleDown(model.get('height')) + 'px';
      width = this.scaleDown(model.get('width')) + 'px';
      return display.css({
        height: height,
        width: width
      });
    };

    PictureControl.prototype.scaleUp = function(px) {
      return parseInt(px * (this.getImageHeight() / this.getTnHeight()));
    };

    PictureControl.prototype.scaleDown = function(px) {
      return parseInt(px * (this.getTnHeight() / this.getImageHeight()));
    };

    PictureControl.prototype.getTnHeight = function() {
      return this.tnSize.height;
    };

    PictureControl.prototype.getTnWidth = function() {
      return this.tnSize.width;
    };

    PictureControl.prototype.getImageHeight = function() {
      return this.image.height;
    };

    PictureControl.prototype.getImageWidth = function() {
      return this.image.width;
    };

    return PictureControl;

  })();

  $(document).ready(function() {
    var app, photoList, pictureControl, _log, _s_log;
    _.templateSettings = {
      interpolate: /\{\{(.+?)\}\}/g
    };
    photoList = new PhotoList($('ul#imageList'));
    pictureControl = new PictureControl($('div#loadedPicture'));
    app = {};
    app.models = [];
    app.server = io.connect("/");
    console.log("Loading");
    _log = function(message) {
      return console.log(message);
    };
    _s_log = function(o) {
      return console.log(JSON.stringify(o));
    };
    app.showDisplay = function(message) {
      var _this = this;
      $("table#displayList").empty();
      app.models = [];
      $.each(message, function(key, display) {
        var model;
        model = new Display(display, {
          socket: app.server
        });
        app.models.push(model);
        return new DisplayRowView({
          model: model,
          el: $("table#displayList")
        });
      });
      return pictureControl.setModels(app.models);
    };
    app.updatePhotoList = function(message) {
      return photoList.update(message);
    };
    app.server.on("connect", function() {
      return _log("Connected to the server" + arguments);
    });
    app.server.emit("controlRegister");
    app.server.on("showDisplayList", app.showDisplay);
    app.server.on("updatePhotoList", app.updatePhotoList);
    app.server.on("message", function(data) {
      return _log("Received message: " + data.message);
    });
    photoList.on('imgClick', function(src) {
      var model, _i, _len, _ref;
      _ref = app.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        model.set({
          'imageSrc': src,
          'imageTop': 0,
          'imageLeft': 0
        });
      }
      console.log(app.models);
      return pictureControl.loadImage(src);
    });
    return window.app = app;
  });

}).call(this);
